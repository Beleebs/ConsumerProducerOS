Consumer/Producer Problem

Among the two programs is a SharedBuffer struct that is used as a stand in for the shared memory. Inside of main, we start out with the shared memory creation/semaphore creation. Names for the shared memory are created, which are consistent between the two programs. This is necessary for shared memory,  otherwise it won't work, and the shared memory won't connect between the two processes. Once Initialized, the shared memory is set to the size of the SharedBuffer structure, ensuring that there is only enough space for the two elements in SharedBuffer->buffer, and the bufferAmount, which shows how many items are in the buffer itself. In order to utilize the struct with the shared memory, a pointer to a SharedBuffer is mapped to the shared memory location, effectively allowing for modification within each process. The semaphore is then created in the producer process, which is then connected to in consumer.

For the different loops, the Producer creates a random number which will be inserted into the buffer. The producer waits for the semaphore to be available, making sure that the consumer isn't in the critical section. Once the semaphore is open, the producer first checks to see if there is space to insert the item. If it does, then the item is inserted. Since buffer[] only has 2 elements, the bufferAmount can dictate which index to access, either 0 or 1. Once inserted, the bufferAmount is incremented, and the produced item is shown in the console, along with the index it was inserted into. The semaphore is then released.

For the consumer loop, I decided to make a limit on the amount of items the consumer process can consume. If the maximum isn't met, then the process will go on to wait for the semaphore. Once open, the consumer checks to see if the buffer has any items in its space. If it does, it will get the item and its index, and output its consumption. The item isn't actually consumed from the buffer[] array, but rather bufferAmount is decremented, indicating that the index isn't available for consumption. Once finished with consumption, the semaphore is released.